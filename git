#!/bin/bash

set -e

GIT_OPTS=("-C" "-c" "--help" "--version" "--exec-path" "--html-path" "--man-path"
          "--info-path" "-p" "--paginate" "--no-pager" "--no-replace-objects"
          "--bare" "--git-dir" "--work-tree" "--namespace")

# TODO: convert to .gitwrapignore file
#       remove basically everything, this will become a blacklist in .gitwrapignore
#
# add commands here to intentionally suppress wrapping
IGNORE_CMDS=("commit" "pull"
          "add" "config" "get-tar-commit-id" "merge-ours" "remote" "show-ref"
          "add--interactive" "count-objects" "grep" "merge-recursive" "remote-ext" "stage"
          "am" "credential" "hash-object" "merge-resolve" "remote-fd" "stash"
          "annotate" "credential-cache" "help" "merge-subtree" "remote-ftp"
          "apply" "credential-cache--daemon" "http-backend" "merge-tree" "remote-ftps" "stripspace"
          "archive" "credential-store" "http-fetch" "mergetool" "remote-http" "submodule"
          "bisect" "daemon" "http-push" "mktag" "remote-https" "submodule--helper"
          "bisect--helper" "describe" "imap-send" "mktree" "remote-testsvn" "subtree"
          "blame" "diff" "index-pack" "mv" "repack" "symbolic-ref"
          "branch" "diff-files" "init" "name-rev" "replace" "tag"
          "bundle" "diff-index" "init-db" "notes" "request-pull" "unpack-file"
          "cat-file" "diff-tree" "instaweb" "pack-objects" "rerere" "unpack-objects"
          "check-attr" "difftool" "interpret-trailers" "pack-redundant" "reset" "update-index"
          "check-ignore" "difftool--helper" "log" "pack-refs" "rev-list" "update-ref"
          "check-mailmap" "fast-export" "ls-files" "patch-id" "rev-parse" "update-server-info"
          "check-ref-format" "fast-import" "ls-remote" "prune" "revert" "upload-archive"
          "fetch" "ls-tree" "prune-packed" "rm" "upload-pack"
          "checkout-index" "fetch-pack" "mailinfo" "send-email" "var"
          "cherry" "filter-branch" "mailsplit" "push" "send-pack" "verify-commit"
          "cherry-pick" "fmt-merge-msg" "merge" "quiltimport" "sh-i18n--envsubst" "verify-pack"
          "clean" "for-each-ref" "merge-base" "read-tree" "shell" "verify-tag"
          "clone" "format-patch" "merge-file" "rebase" "shortlog" "web--browse"
          "column" "fsck" "merge-index" "receive-pack" "show" "whatchanged"
          "fsck-objects" "merge-octopus" "reflog" "show-branch" "worktree"
          "commit-tree" "gc" "merge-one-file" "relink" "show-index" "write-tree")

# Extract the command from a git command line
# Echoes any command we want to wrap
function get_command {
    # `shift` past params which are git options
    for opt in "${GIT_OPTS[@]}"; do
        #
        # if the current array element of GIT_OPTS doesn't match the first param without a `=value`
        local first_param_name="${1%=*}"
        if [ "$first_param_name" != "$opt" ]; then
            continue # restart loop with next GIT_OPTS item
        fi
        # The first param belongs to the GIT_OPTS collection.
        # Extra shift for 2 argument options
        if [ "-C" == "$1" ] || [ "-c" == "$1" ]; then
            shift
        fi
        shift

        # if there are no more parameters, there is no command to get, just return.
        if [ "$1" == "" ]; then
            return
        fi
        break
    done
    # with that out of the way, we're now scrutinizing the current command
    local currentcmd="$1"

    # if directory exists that matches $currentcmd, set $COMMAND
    if [ -d "$hooksdir/$currentcmd" ]; then
        echo "$currentcmd"
        return
    fi

    # If not found, look up command in git alias
    # This alias-proofs the git-wrapper, invoking pre and post commands based on the intended git command
    #     this means that $WRAP_CMDS should not include aliases
    local alias="$("$GIT" config -l | grep "alias."$currentcmd"=")"
    if [ "$alias" != "" ]; then
        # remove prefix: everything before and including equals
        local command="${alias#*=}"
        # recurse
        get_command "$command"
    fi
}


function run_commands {
    sequence=$1
    shift

    local path="$hooksdir/$COMMAND/$sequence"

    if [ ! -d "$path" ]; then
        #echo "no $sequence directory found for $COMMAND"
        return
    fi

    # https://stackoverflow.com/a/23357277
    mapfile -d $'\0' SCRIPTS < <(find "$path" -mindepth 1 -maxdepth 1 -name '*.sh' -type f -print0)

    if [ ${#SCRIPTS[@]} -eq 0 ]; then
        #echo "git-wrapper err: $sequence script(s) missing for $COMMAND"
        return
    fi

    # abort if the command is in the $IGNORE_CMDS array
    for ignorecmd in "${IGNORE_CMDS[@]}"; do
        if [ "$ignorecmd" == "$COMMAND" ]; then
            echo "[git-wrapper] deliberately ignoring ${COMMAND}/${sequence} scripts, see \$IGNORE_CMDS"
            return
        fi
    done

    # run found scripts
    for script in "${SCRIPTS[@]}"; do
        #echo "running ${sequence}-command script: '$script'"
        #eval "$script $@"
        bash -c "$script $@"
    done
}


# Assuming this script is called 'git', find the next available 'git' command
# via 'which'. Override this if you want to hard-code a different path.
GIT="$(which -a git | awk 'NR==2 {print}')"
if [ "$GIT" = "" ]; then
    echo "git executable not found"
    exit 1
fi
#GIT=/usr/bin/git

# get paths for dynamic loading
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
hooksdir="${DIR}/hooks"
# Commands we want to wrap. Do not include aliases, use their root/intended git command instead.
mapfile -d $'\0' WRAP_CMDS < <(find "$hooksdir" -mindepth 1 -maxdepth 1 -type d -printf '%f\0')
#echo "${WRAP_CMDS[*]}"

# Fetch the command if it is in the $WRAP_CMDS list
# TODO Remove this global variable
COMMAND="$(get_command "$@")"

run_commands "pre" "$@"

#echo "Running: '$GIT $@'"
"$GIT" "$@"
rc="$?"
if [ "$rc" != "0" ]; then
    exit "$rc"
fi

run_commands "post" "$@"
